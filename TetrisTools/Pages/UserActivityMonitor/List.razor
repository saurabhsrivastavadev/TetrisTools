@page "/user-activity-monitor"

@using System.Diagnostics
@using System.Runtime.InteropServices
@using DotNetUtils.Win32.UserActivity

@inject TetrisTools.Services.UserActivityMonitoringService UAM

<div class="container-fluid">
    <div class="row">
        <div class="column">
            <label for="statsDuration">Show Activity Stats for </label>
            <select name="statsDuration" id="statsDuration" @onchange="StatsDurationChanged">
                <option value="8h">Last 8 Hours</option>
                <option value="24h">Last 24 Hours</option>
                <option value="1h">Last 1 Hour</option>
                <option value="1w">Last 1 Week</option>
                <option value="since6">Since 6 AM</option>
                <option value="since18">Since 6 PM</option>
                <option value="since20">Since 8 PM</option>
                <option value="since0">Since 12 AM</option>
            </select>
        </div>
        <div class="column align-self-center">
            <button class="btn btn-info" @onclick="RefreshUserActivityStats">Refresh Statistics</button>
        </div>
    </div>
</div>

<br />

@if (_stats != null)
{
    <p>
        Total Active Time - <b>@GetTimeSpanString(_stats.TotalActiveTime)</b> <br />
        Total Inactive Time - <b>@GetTimeSpanString(_stats.TotalInactiveTime)</b><br />
        Total Unmonitored Time - <b>@GetTimeSpanString(_stats.TotalUnmonitoredTime)</b>
    </p>
    <br />
}

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Activity State</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
            <th scope="col">Duration</th>
        </tr>
    </thead>
    <tbody>
        @if (_stats != null)
        {
            if (_stats.CompleteSessionList != null)
            {
                _stats.CompleteSessionList.Reverse();
                foreach (var stat in _stats.CompleteSessionList)
                {
                    <tr class="@GetTableRowClass(stat)">
                        <td>@stat.ActivityState</td>
                        <td>@stat.SessionStartTime</td>
                        <td>@(stat.SessionEndTime == DateTime.MinValue? "Ongoing" : stat.SessionEndTime)</td>
                        @if (stat.SessionEndTime > stat.SessionStartTime)
                        {
                            <td>@GetTimeSpanString(stat.SessionEndTime - stat.SessionStartTime)</td>
                        }
                        else
                        {
                            <td>Ongoing</td>
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code
{
    private UserActivityStats _stats;
    private bool _isMonitoring = false;
    private TimeSpan _statsDuration = TimeSpan.FromHours(8);

    public async void RefreshUserActivityStats()
    {
        _stats = await UAM.GetUserActivityStatsAsync(
            DateTime.Now - _statsDuration, DateTime.Now);

        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!_isMonitoring)
            {
                UAM.StartUserActivityMonitoring();
                _isMonitoring = true;
            }

            RefreshUserActivityStats();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    public void StatsDurationChanged(ChangeEventArgs e)
    {
        string statsDuration = e.Value.ToString();

        if (statsDuration.Last() == 'h')
        {
            _statsDuration = TimeSpan.FromHours(int.Parse(statsDuration[0..^1]));
        }
        else if (statsDuration.Last() == 'd')
        {
            _statsDuration = TimeSpan.FromDays(int.Parse(statsDuration[0..^1]));
        }
        else if (statsDuration.Last() == 'w')
        {
            _statsDuration = TimeSpan.FromDays(int.Parse(statsDuration[0..^1]) * 7);
        }
        else if (statsDuration.StartsWith("since"))
        {
            // since can be followed by hour of day in 24 hour format, so since0 - since23
            int sinceTime = int.Parse(statsDuration[5..]);
            if (DateTime.Now.Hour >= sinceTime)
            {
                _statsDuration = (DateTime.Now - DateTime.Today) - TimeSpan.FromHours(sinceTime);
            }
            else
            {
                _statsDuration = (DateTime.Now - DateTime.Today) + TimeSpan.FromHours(24 - sinceTime);
            }
        }

        RefreshUserActivityStats();
    }

    private string GetTableRowClass(UserActivitySession session)
    {
        switch (session.ActivityState)
        {
            case UserActivityState.ACTIVE:
                return "table-success";

            case UserActivityState.INACTIVE:
                return "table-warning";

            case UserActivityState.UNMONITORED:
                return "table-danger";
        }

        return "";
    }

    private string GetTimeSpanString(TimeSpan timespan)
    {
        string timespanFormat = "%h' Hours, '%m' Minutes, '%s' Seconds.'";

        if (timespan.TotalMinutes < 60)
        {
            timespanFormat = "%m' Minutes, '%s' Seconds.'";
        }
        if (timespan.TotalSeconds < 60)
        {
            timespanFormat = "%s' Seconds.'";
        }

        return timespan.ToString(timespanFormat);
    }
}
