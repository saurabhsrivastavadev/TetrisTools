@page "/user-activity-monitor"

@using System.Diagnostics
@using System.Runtime.InteropServices
@using DotNetUtils.Win32.UserActivity

@inject TetrisTools.Services.UserActivityMonitoringService UAM

<h2>User Activity Monitor</h2>

<br />
<button class="btn btn-info" @onclick="RefreshUserActivityStats">Refresh User Activity Statistics</button>
<br />
<br />

@if (_stats != null)
{
<p>
    Total Active Time - <b>@GetTimeSpanString(_stats.TotalActiveTime)</b> <br />
    Total Inactive Time - <b>@GetTimeSpanString(_stats.TotalInactiveTime)</b><br />
    Total Unmonitored Time - <b>@GetTimeSpanString(_stats.TotalUnmonitoredTime)</b>
</p>
    <br />
}

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Activity State</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
            <th scope="col">Duration</th>
        </tr>
    </thead>
    <tbody>
        @if (_stats != null)
        {
            if (_stats.CompleteSessionList != null)
            {
                _stats.CompleteSessionList.Reverse();
                foreach (var stat in _stats.CompleteSessionList)
                {
                    <tr class="@GetTableRowClass(stat)">
                        <td>@stat.ActivityState</td>
                        <td>@stat.SessionStartTime</td>
                        <td>@(stat.SessionEndTime == DateTime.MinValue? "Ongoing" : stat.SessionEndTime)</td>
                        @if (stat.SessionEndTime > stat.SessionStartTime)
                        {
                            <td>@GetTimeSpanString(stat.SessionEndTime - stat.SessionStartTime)</td>
                        }
                        else
                        {
                            <td>Ongoing</td>
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code
{
    private UserActivityStats _stats;
    private bool _isMonitoring = false;

    public async void RefreshUserActivityStats()
    {
        // todo - update the UI to accept stats duration from user
        _stats = await UAM.GetUserActivityStatsAsync(
            DateTime.Now - TimeSpan.FromDays(1), DateTime.Now);

        StateHasChanged();
    }

    public async void ToggleUserActivityMonitoring()
    {
        if (_isMonitoring)
        {
            await UAM.StopUserActivityMonitoring();
        }
        else
        {
            await UAM.StartUserActivityMonitoring();
        }

        _isMonitoring = !_isMonitoring;

        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!_isMonitoring)
            {
                UAM.StartUserActivityMonitoring();
                _isMonitoring = true;
            }

            RefreshUserActivityStats();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private string GetTableRowClass(UserActivitySession session)
    {
        switch (session.ActivityState)
        {
            case UserActivityState.ACTIVE:
                return "table-success";

            case UserActivityState.INACTIVE:
                return "table-warning";

            case UserActivityState.UNMONITORED:
                return "table-danger";
        }

        return "";
    }

    private string GetTimeSpanString(TimeSpan timespan)
    {
        string timespanFormat = "%h' Hours, '%m' Minutes, '%s' Seconds.'";

        if (timespan.TotalMinutes < 60)
        {
            timespanFormat = "%m' Minutes, '%s' Seconds.'";
        }
        if (timespan.TotalSeconds < 60)
        {
            timespanFormat = "%s' Seconds.'";
        }

        return timespan.ToString(timespanFormat);
    }
}
